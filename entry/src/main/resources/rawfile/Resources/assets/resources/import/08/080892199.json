[1,["260ca3c9-5bee-4d36-bac3-00830d518648","a5bd6b6c-d8d5-47fe-b42f-b8d50968fb78","d3536c19-97a7-4c80-a299-12fd5c6d2f05@6c48a","a3cd009f-0ab0-420d-9278-b9fdab939bbc","c45af642-dea2-4669-8421-0ba86d05f198@73b7f","c45af642-dea2-4669-8421-0ba86d05f198@a7dbb","c45af642-dea2-4669-8421-0ba86d05f198@30732","c45af642-dea2-4669-8421-0ba86d05f198@44034","c45af642-dea2-4669-8421-0ba86d05f198@f1394","c45af642-dea2-4669-8421-0ba86d05f198@28081","c45af642-dea2-4669-8421-0ba86d05f198@3a0f4"],["_parent","node","_mesh","normalMaterial","instancingMaterial","mainTexture","_effectAsset","_skeleton","root","target","data","_defaultClip"],[["cc.Node",["_name","_prefab","_parent","_lpos","_euler","_lrot","_children","_lscale","_components"],2,4,1,5,5,5,2,5,9],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_lscale","_euler"],2,1,12,4,5,5,5,5],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler","_lscale"],2,1,9,4,5,5,5,5],["cc.Material",["_states","_defines","_props"],1,12],["cc.Prefab",["_name"],2],["cc.SkeletalAnimation",["_name","playOnLoad","node","__prefab","_clips","_sockets","_defaultClip"],1,1,4,3,9,6],["cc.CompPrefabInfo",["fileId"],2],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["62579N1fFdIdbaTNEdZclqj",["triangle","vertex","node","__prefab"],1,1,4],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],2,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["bcf19WXQ/FNSoaaPEqPFbYb",["node","__prefab","normalMaterial","instancingMaterial"],3,1,4,6,6],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12]],[[9,0,1,2,2],[0,0,2,1,3,5,7,4,2],[0,0,2,6,1,3,5,4,2],[2,0,1,2,3,4,5,6,2],[6,0,2],[0,0,2,1,3,4,2],[11,1],[12,0,1,2,3,1],[15,0,1,2,3],[0,0,6,1,3,5,4,2],[0,0,2,1,3,2],[2,0,1,2,3,4,5,7,6,2],[3,0,1,2,3],[0,0,2,8,1,3,5,7,4,2],[0,0,2,8,1,3,5,4,2],[10,0,1,2,3,4,5,6,7,2],[13,0,1,2,3,4,1],[16,0,1,2,3,4],[4,0,2],[0,0,6,8,1,7,2],[0,0,2,6,1,3,5,7,4,2],[0,0,2,1,3,5,4,2],[0,0,2,6,1,5,4,2],[1,0,1,2,3,2],[1,0,1,2,3,4,5,6,7,2],[5,0,1,2,3,4,5,6,3],[7,0,1,2],[8,0,1,2,3,3],[14,0,1,2,4]],[[[[12,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":0},"mainTexture",6,0]],11]]],0,0,[0,0],[5,6],[2,3]],[[[18,"shitouWalk"],[19,"shitouWalk",[-5,-6],[[25,"shitouWalk<SkeletalAnimation>",true,-3,[4,"da/rosFOxCcb9+LR0CaCc2"],[18],[[26,"RootNode/Bone031",-2]],19],[27,2864,1594,-4,[4,"3er9oXHOFFp6uddkOH7Z55"]]],[0,"9fgdLhkgFFXa2eMpHpn0iY",-1,0],[1,2,2,2]],[23,"RootNode",1,[[-7,-8,[1,"Bone001",-9,[0,"40sQD1NapLJ7u0BduindpN",1,0],[1,-0.536357760429382,0.197072848677635,-0.336291909217834],[3,0.009507299274330187,-0.7139168882719831,-0.13184873584264684,0.6876395849260375],[1,2.54000163078308,2.53999996185303,2.54000115394592],[1,-10.288699867416664,-93.16324889633691,-11.239095909679557]],[1,"Bone003",-10,[0,"8exnicZTtPTZLoTSECEs3I",1,0],[1,-0.146636709570885,0.285050630569458,-0.0460008047521114],[3,0.009932161018846312,-0.8081485989181647,-0.1626428616245519,0.5659898354269978],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-14.882272203418603,-111.50184935324123,-11.546417128339508]],[1,"Bone003(mirrored)",-11,[0,"cdVgOeDt5FHohzLomta00c",1,0],[1,0.130318313837051,0.269766420125961,-0.057522501796484],[3,0.6960679886401985,-0.37603348481024973,-0.5022639034502163,0.3490259944227651],[1,2.53999996185303,2.54000067710876,2.54000067710876],[1,167.13495452305403,64.03681411672808,-60.93817444137161]],[1,"Bone006",-12,[0,"35LhAWyCpHMbwp9Z0vfvKk",1,0],[1,-0.00836389884352684,0.249373957514763,0.0242173615843058],[3,0.1304851657436483,-0.10716691909250564,0.672136742563278,0.7209168275671601],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,79.3596480792887,-77.44168543097487,70.24423160481116]],[1,"Bone007",-13,[0,"97c/dJQ61Ky4hZuUkIrhTX",1,0],[1,-0.00706930086016655,0.419193983078003,0.0117094963788986],[3,0.556439931690817,0.2283749860059753,0.7347698748687788,0.3135804508766594],[1,1.58257818222046,2.54000067710876,2.53999996185303],[1,178.904154390431,-105.26571069682207,45.64097502809301]],[1,"Bone008",-14,[0,"3c5AjhlHdL87vofLlDwLlw",1,0],[1,-0.423394739627838,0.67667031288147,-0.00174191035330296],[3,-0.04587174171776272,0.6675063916489244,-0.34168079233269794,0.6599888154889533],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,27.427230193945288,98.34333738634295,-30.813841977438685]],[1,"Bone009",-15,[0,"berQAt6GxEXIjgdhE8AJCK",1,0],[1,-0.458031117916107,0.534298479557037,-0.237915143370628],[3,-0.2758103051691535,0.6095880951480249,-0.5504205304035796,0.4993678699381281],[1,2.54000020027161,2.53999996185303,2.53999996185303],[1,58.55172049063213,138.84072529508677,-62.37310564866009]],[1,"Bone010",-16,[0,"64O+h3xB9MOoiF63S75RW6",1,0],[1,-0.552791714668274,0.293818712234497,-0.320752948522568],[3,0.05004127306560895,0.06502606697555142,-0.7748578164377007,0.6267877199730887],[1,2.54000020027161,2.53999948501587,2.53999948501587],[1,141.53620407973983,142.76123953713295,-74.7603350313254]],[1,"Bone021",-17,[0,"bbthw8roBEnqW6q8/RT6AQ",1,0],[1,-0.0662235617637634,0.594555675983429,0.202169984579086],[3,0.5469284165892481,0.4083167991410251,0.6175927046016513,0.3908016759038056],[1,2.54000020027161,2.54000020027161,2.54000020027161],[1,-167.9831377326865,-105.1177159181199,68.3341286130205]],[1,"Bone009(mirrored)",-18,[0,"16QRkUh19C/7nXvPJHiokn",1,0],[1,0.466473758220673,0.394559890031815,0.216657117009163],[3,0.5671410033404204,0.028739035478397568,0.7532230110999818,-0.33193409845821753],[1,2.53999996185303,2.53999996185303,2.54000020027161],[1,-151.64878361136323,-98.87205906134497,-27.86841985195484]],[1,"Bone010(mirrored)",-19,[0,"6dRsRHAcdOWa3u55sX05MS",1,0],[1,0.429467558860779,0.267683565616608,0.45373323559761],[3,0.630731930356709,-0.4399343659877844,0.6341767807473628,0.08034174763058743],[1,2.53999996185303,2.53999972343445,2.53999996185303],[1,132.30248105571204,-102.40082707310827,-26.940152378796785]],[1,"Bone008(mirrored)",-20,[0,"9987tBYg5FAId0D/q7IZTj",1,0],[1,0.330572724342346,0.634269833564758,0.252951443195343],[3,-0.46131205066832676,0.3311590218991916,-0.38190161774593445,0.7291611951317705],[1,2.53999948501587,2.53999996185303,2.54000020027161],[1,-56.04457150164138,14.952534883680748,-59.59516628873367]],-21,-22,-23,[1,"Bone004(mirrored)",-24,[0,"99BK9zoA1CXZ1A/IZu2AVD",1,0],[1,0.163444474339485,0.133608102798462,-0.125551924109459],[3,0.7898323634912231,0.04172137804466503,-0.6108147578501506,0.036462251553960774],[1,1.6321702003479,2.54000067710876,2.53999996185303],[1,173.76590187141753,75.49961821131613,1.224069994964635]],[1,"Bone004",-25,[0,"d7yOnus0xDHoA/oW71huOR",1,0],[1,-0.202575951814651,0.253871351480484,0.0959959402680397],[3,-0.5363161508711546,0.60473656032368,0.4934633323459969,-0.32117381361595687],[1,1.6383490562439,2.53999996185303,2.53999996185303],[1,-103.86511374424163,147.18360447837605,-74.93574630338676]],[1,"Bone017",-26,[0,"04oSbQ3G9Kfo3TPGYRCAJo",1,0],[1,-0.594203650951385,0.127437442541122,-0.282321155071259],[3,0.029258447323962822,0.02910217325561764,-0.4989854490218305,0.8656272456643641],[1,2.53999948501587,2.54000067710876,2.53999996185303],[1,9.050806200994696,9.037683291381967,-59.560865164458285]],[1,"Bone018",-27,[0,"39LYt4BYJKDK4wT4iHusNU",1,0],[1,-0.561806559562683,0.0716110542416573,-0.287474095821381],[3,0.04126260342602765,0.0005898141410614149,0.2428731271069426,0.9691799078639013],[1,2.54000115394592,2.53999996185303,2.54000020027161],[1,5.182833433960369,-1.2275370201781801,28.087809437570186]],[1,"Bone015",-28,[0,"18RiK3I+JBbbDC17eDL6bC",1,0],[1,-0.558703780174255,0.0899010077118874,-0.352563768625259],[3,0.05646647388906104,-0.013052296538110375,0.25128113671638924,0.9661775019178084],[1,2.54000067710876,2.54000115394592,2.53999996185303],[1,7.596441964787817,-3.5118751448944012,28.95289032605087]],[1,"Bone014",-29,[0,"3cWnYgt0FFHZLe6ZnYVOF+",1,0],[1,-0.586613893508911,0.137878492474556,-0.346461623907089],[3,0.048334962770985535,0.03526456964679063,-0.4988386543419864,0.8646271673015083],[1,2.54000067710876,2.53999996185303,2.53999996185303],[1,13.422850879617016,12.324392212385826,-59.22798390334911]],[1,"Bone011",-30,[0,"2dwFdtoghFt5yfnqvnEBFu",1,0],[1,-0.586281001567841,0.152020901441574,-0.415905982255936],[3,0.11505969504201688,0.041856661040277486,-0.39299618823535576,0.9113524469358043],[1,2.53999948501587,2.53999996185303,2.54000115394592],[1,20.05426873744805,13.629867234334778,-44.96575666721142]],[1,"Bone012",-31,[0,"98GZMebCZK1J2FbEWXhfFu",1,0],[1,-0.554940462112427,0.119810625910759,-0.423505276441574],[3,0.11847978632057678,-0.03115084715209642,0.13082472761082914,0.983807428108108],[1,2.54000020027161,2.53999948501587,2.54000163078308],[1,14.429464553280626,-5.469774641144046,14.479357630335743]],[1,"Bone019",-32,[0,"3dX9M6hwxE5YjAzRFaY28S",1,0],[1,-0.508119523525238,0.204058408737183,-0.23958232998848],[3,-0.5521527473704707,0.47176932818147693,-0.37706541639083546,0.5747892799282578],[1,2.53999996185303,2.53999900817871,2.54000020027161],[1,-69.21286199374792,24.965066367758364,-72.63902336007553]],[1,"Bone020",-33,[0,"67hQLo+QtDTJjrhALC0b86",1,0],[1,-0.493103832006454,0.151078641414642,-0.246573194861412],[3,-0.21584237576201273,0.6934346980583164,-0.012787422779183301,0.6873113342386027],[1,2.53999996185303,2.54000163078308,2.54000091552734],[1,-17.105335988233552,87.70564959833578,-18.4769466712245]],[1,"Bone019(mirrored)",-34,[0,"b8ek7JWpJLcoYzxUZfIfZE",1,0],[1,0.309115946292877,0.265681236982346,0.500129818916321],[3,0.2928562790468521,0.057733201084165305,0.8165603960083638,-0.4940963438298967],[1,2.54000020027161,2.53999972343445,2.54000067710876],[1,-142.7774289122365,-122.43682603199362,-50.63344512140524]],[1,"Bone020(mirrored)",-35,[0,"caRsqYcWJNRKqkeZcjukak",1,0],[1,0.290231555700302,0.222767487168312,0.529844701290131],[3,-0.2983714109899202,-0.008513175138832582,-0.7236192386002428,0.6223160165707972],[1,2.54000067710876,2.54000067710876,2.54000115394592],[1,-120.42165810257765,-96.11466409046052,-63.58038750754386]],[1,"Bone017(mirrored)",-36,[0,"20AtdWXghOE4yz1TKIwhrf",1,0],[1,0.355941534042358,0.241250872612,0.611117959022522],[3,-0.34240418847195164,0.660681310685444,-0.6348122986745395,0.2080214481234465],[1,2.53999948501587,2.54000091552734,2.54000020027161],[1,93.32481125512419,-166.75190938276543,-45.77030956587608]],[1,"Bone018(mirrored)",-37,[0,"512k4KlUhAN4tv+/yNGAA8",1,0],[1,0.311977386474609,0.194853410124779,0.621468484401703],[3,0.28255948182692414,0.688405031038981,-0.25181108497799365,0.6187485999597298],[1,2.53999900817871,2.54000067710876,2.53999996185303],[1,44.303477385811306,94.29232985654588,4.440008139680628]],[1,"Bone015(mirrored)",-38,[0,"51cUwgjwFIr4njUTkeKLs6",1,0],[1,0.361568182706833,0.153525203466415,0.603214263916016],[3,0.2915746902420937,0.695085235776919,-0.23628396077541655,0.6131970359480333],[1,2.53999900817871,2.54000067710876,2.54000091552734],[1,43.6845805724091,94.50079516337205,6.635999628945748]],[1,"Bone014(mirrored)",-39,[0,"38XyhCu4RLUKSsn221thYV",1,0],[1,0.398525774478912,0.194458082318306,0.59445583820343],[3,-0.35332467648924276,0.6682928705420335,-0.6199044496955755,0.21039198039394613],[1,2.53999853134155,2.53999996185303,2.54000020027161],[1,91.53674830302283,-166.6666542687281,-47.14645439024636]],[1,"Bone011(mirrored)",-40,[0,"dfkBRgZYhN8pA4lbm/EPPK",1,0],[1,0.450648933649063,0.1489387601614,0.579165399074554],[3,-0.303646864482504,0.731476550093117,-0.5411673819466317,0.2826278526098306],[1,2.53999996185303,2.54000020027161,2.54000067710876],[1,69.65903589465965,172.630503757212,-48.60069331631861]],[1,"Bone012(mirrored)",-41,[0,"097pOETHFMy5gvJXqU/ROM",1,0],[1,0.420756250619888,0.114748761057854,0.575299203395844],[3,0.19414952256677095,0.7678318564095479,-0.26466023730209254,0.550177391357517],[1,2.53999996185303,2.54000163078308,2.54000067710876],[1,38.32178396507634,108.61632041833174,0.3969608700689574]],-42,[1,"Bone028",-43,[0,"77R55eM+1OKpaUSVuT+GWY",1,0],[1,0.210129350423813,0.137595608830452,-0.305552750825882],[3,0.46658483489423996,-0.41335419123189193,-0.29426607705154345,0.7244614415788037],[1,2.53999996185303,2.54000020027161,2.54000020027161],[1,47.87293226685721,-33.76553966470531,-54.30146496858499]],[1,"Bone030",-44,[0,"782YyPSetLB7RdtRZa1/ga",1,0],[1,-0.244522362947464,0.0740086287260056,0.0739610344171524],[3,-0.0016619494627035099,-0.8240841730929378,-0.01670893489010686,0.5662184428968653],[1,2.54000067710876,2.53999996185303,2.54000020027161],[1,-1.686174193948476,-111.028655211667,-0.9272375439724873]]],1,1,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4],[0,"30vIK1bS9Lu6y6QyMeKqTB",1,0]],[9,"Bip001 L Hand",[-45,-46,-47,-48],[0,"37LxVgaNBExr2xx20WoTk4",1,0],[1,0.106860674917698,1.90734859017994e-8,0],[3,-0.6045208587438835,0.028305726191845532,-0.0033877727188941975,0.7960790414301304],[1,-74.37753049737853,2.349981829661479,-2.270462363617028]],[9,"Bip001 R Hand",[-49,-50,-51,-52],[0,"2d/1cDbyJLGa6ihRdw5gcg",1,0],[1,0.106860689818859,-9.53674295089968e-9,0],[3,0.634416743433036,-0.10835288198911418,0.006497290757169285,0.7653318455606635],[1,78.66463208206706,-10.109455592313111,-7.327264823190712]],[9,"Bip001 Spine",[-53,-54,-55],[0,"acnDBVBpFGmaSFuCe1+OlO",1,0],[1,0.0644553899765015,0.00264323712326586,-0.00608551176264882],[3,-0.12501970228961398,0.10204212608684665,0.2182843736735993,0.962449692582951],[1,-18.083003355537265,15.853285380360184,23.244827207423498]],[2,"Bip001 Neck",5,[-56,-57,-58],[0,"cctxHhFOtEGqMsTnSSgk1J",1,0],[1,0.0872276797890663,0.0107521815225482,-8.94665674877615e-7],[3,0.03921263283098097,0.00497903347692873,0.012407131463559063,0.9991414523184113],[1,4.4885116623531784,0.5144847815950555,1.4430574269657153]],[20,"Bone031 Socket",1,[-59,-60],[0,"5bpysNCNhKxqJBEZUJiJ0S",1,0],[1,0.0443644337356091,0.734939634799957,-0.151491075754166],[3,0.19013311303413946,-0.775931431594513,-0.15126532582358315,0.5821499926952864],[1,2.53999948501587,2.53999996185303,2.53999996185303],[1,-0.8685962690018766,-106.45863145358092,-28.110837934348645]],[13,"Object07",2,[[15,1,-61,[4,"c6Us9rvBhOBJSG7XOZy3O5"],[0],[6],1,1,2],[7,-62,[4,"06fud6Q/dBoYhhQLalkLjR"],3,4]],[0,"78nZ3xDYhAXqOihYwfx0Eq",1,0],[1,-0.0000214225055970019,0,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[24,"Bip001",2,[[[21,"Bip001 Footsteps",-63,[0,"411lw4Ra9KQ5xOhoS5aOku",1,0],[1,0.0408170036971569,-0.00294182053767145,-0.114043064415455],[3,-0.13015613345811872,-0.11154155018872422,0.7000568716688707,0.6932086554089776],[1,-120.03980942566717,100.35684601888278,88.39280166002348]],-64],4,1],[0,"50ZVBWs6VP/KMIoCYq6Lpl",1,0],[1,-0.00815919134765863,0.277408540248871,-0.0517616868019104],[3,-0.39813826265714664,-0.416143187067724,-0.5738867633374762,0.5822067970502421],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-88.52234425725958,-90.30684132944988,-19.686687266500705]],[13,"001",2,[[15,1,-65,[4,"46m/Ly6tRG/KNvTgITNJ0B"],[5],[6],1,6,7],[7,-66,[4,"ec8DYHv9ZOIoY9DR0XQbiN"],8,9]],[0,"27qoVI07BJmZqgX3IIay0r",1,0],[1,-0.0000214225055970019,0,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[14,"003",7,[[16,-67,[4,"3dCakxpTJBD5xM9KQqCMVQ"],[10],[6],11],[7,-68,[4,"5cabb4cEFBHYYJc+7vbNqI"],12,13]],[0,"10ctn0/TpFpY7M39cBqogZ",1,0],[1,0.0355395302176476,3.81469718035987e-8,-9.53674259562831e-8],[3,0.5000005289910768,-0.4999994859098084,-0.500000052153926,-0.49999993294463774],[1,-90.00006659434428,89.99994706603376,-0.0000017075164856505433]],[14,"002",7,[[16,-69,[4,"b0gkVOILZB6YNpz47SYM/9"],[14],[6],15],[7,-70,[4,"7fdQNmCtBMWLcdzz7r7EgI"],16,17]],[0,"d65O/U5v1NCp2yxgWGF1Ym",1,0],[1,0.0439056754112244,3.81469718035987e-8,-9.53674259562831e-8],[3,0.5000005289910768,-0.4999994859098084,-0.500000052153926,-0.49999993294463774],[1,-90.00006659434428,89.99994706603376,-0.0000017075164856505433]],[22,"Bip001 Pelvis",9,[5],[0,"f1jGLYtTlFnZeeQ1R78awa",1,0],[3,0.5149432439483681,0.5305566807041427,0.4709582047924413,-0.48118752416372423],[1,-88.49996678022045,-90.37888894748929,5.346273620714851]],[2,"Bip001 L Thigh",5,[-71],[0,"41MmvHBCRPRZ7jmMnnXC3M",1,0],[1,-0.0732583031058311,0.014508418738842,0.047674648463726],[3,0.1375313114499184,0.9885551414651443,0.04574949331918474,-0.04184321348476664],[1,-6.075299827825313,-174.32220508807472,15.550401918874767]],[2,"Bip001 L Calf",14,[-72],[0,"ab00VhuSlFX7b2R1zjzdlO",1,0],[1,0.0613269358873367,8.88178399847791e-18,4.76837147544984e-9],[3,-4.175133486236981e-18,-1.3709935957516236e-17,-0.5209202347729512,0.8536053590530541],[1,-2.682757754776885e-15,-3.477655925533482e-15,-62.78799857962123]],[2,"Bip001 L Foot",15,[-73],[0,"046iC8V5ZP9ZHDsVHtw5wv",1,0],[1,0.0732279345393181,-4.76837147544984e-9,-9.53674295089968e-9],[3,-0.2107579358026666,-0.20051435631035244,0.15573723229602104,0.9439920549911524],[1,-21.24911919749692,-19.760055458874653,22.24385828503072]],[3,"Bip001 L Toe0",16,[[1,"Bip001 L Toe0Nub",-74,[0,"3f3YTWwIBMu7XcofDLQ+WI",1,0],[1,0.0036944483872503,1.77635679969558e-17,-9.53674295089968e-9],[3,-7.4505805969238265e-9,-1.8041124150158794e-16,0.9999999999999996,-2.9802322387695286e-8],[1,-1,-1,-1],[1,179.99999999999994,179.99999914622634,-0.000003415094585006373]]],[0,"26AN3ZdK5I8ptyzgaHQcIZ",1,0],[1,0.0410843938589096,0.0364518500864506,1.77635679969558e-17],[3,-0.06114014566134098,-0.040680862667016066,0.8511525330562827,0.5197560153312811],[1,179.2850509621879,172.21952902658987,62.84282361199526]],[2,"Bip001 R Thigh",5,[-75],[0,"baSSXLMPdByJ4il5Sm5n5k",1,0],[1,-0.0458244979381561,0.035941656678915,-0.0559301041066647],[3,0.868484298047433,0.4804767258420854,0.014919377516244947,0.1210559876406576],[1,158.9454319393293,9.5426155016321,56.94896859898469]],[2,"Bip001 R Calf",18,[-76],[0,"17ONJTmCVOq6o9BWIkLqop",1,0],[1,0.0613269172608852,0,0],[3,2.015703790577615e-17,2.3847351942518526e-17,-0.6455410605336223,0.763725565347348],[1,2.118326765118228e-14,2.1483337794759325e-14,-80.41250891675621]],[2,"Bip001 R Foot",19,[-77],[0,"24DN+vSk1JwrIO+yNaG5rB",1,0],[1,0.0732279494404793,0,-9.53674295089968e-9],[3,0.01875774766654084,0.11279095072685075,0.009177950299091523,0.9933992719772441],[1,2.0175934834171874,12.932621862558275,1.2873236932969656]],[3,"Bip001 R Toe0",20,[[5,"Bip001 R Toe0Nub",-78,[0,"78uogtSPNH5Yhn7NSuxHpj",1,0],[1,0.0036944483872503,1.19209286886246e-9,-9.53674295089968e-9],[1,-3.320325150863778e-15,0.0000014357404480910641,1.0672170578144926e-7]]],[0,"597bWdWvFBc5OgT6mqSz0d",1,0],[1,0.0410843938589096,0.0364518500864506,-9.53674295089968e-9],[3,0.00032358215375061716,0.00029230825398010373,0.7092937918609439,0.7049128504134384],[1,179.61594629096916,-179.56604139345305,89.64500941152902]],[2,"Bip001 L Clavicle",6,[-79],[0,"22/m5I67tCzYzvAmXpjoJB",1,0],[1,-0.00342000951059163,-0.0417948625981808,0.0842406526207924],[3,0.7450314722293457,0.09711023370676014,0.6463547912129566,0.1331284784456248],[1,175.5959413960358,-81.17040657313756,18.46932034137702]],[2,"Bip001 L UpperArm",22,[-80],[0,"febf/od4RD0Y2E5gjV9ksu",1,0],[1,0.077858954668045,0,1.90734859017994e-8],[3,-0.2726052372852237,0.5429416237925383,0.0050480067163351326,0.7942765862005379],[1,-27.253719063833042,64.62541150207909,-16.738163023816444]],[2,"Bip001 L Forearm",23,[3],[0,"8dg3nCtexOVI49egOW6mrH",1,0],[1,0.10942280292511,1.77635679969558e-17,0],[3,-4.443054547999875e-17,-6.646677533293475e-20,-0.62352629385136,0.7818023796817118],[1,-1.7916612658702363e-14,-1.4299132250545377e-14,-77.14820580462194]],[2,"Bip001 L Finger0",3,[-81],[0,"8eArEg/lRBWrjalHvklXky",1,0],[1,0.0253323540091515,0.0232556145638227,-0.0373742207884789],[3,0.7310170474825578,0.11657708793267581,0.21369613542054774,0.6374620149980263],[1,100.2866075656381,-10.527022510069896,26.288165768415016]],[3,"Bip001 L Finger01",25,[[5,"Bip001 L Finger0Nub",-82,[0,"eb8ifUES1KK6fBNenCH8J/",1,0],[1,0.024080628529191,1.19209286886246e-9,-1.90734859017994e-8],[1,0.0000017075472925031926,3.1805531648570318e-15,-0.0000017075472925031926]]],[0,"d9VSSGBSpCk6QwP0uZ/ZvR",1,0],[1,0.0218536853790283,4.76837147544984e-9,1.90734859017994e-8],[3,1.715999985916089e-8,-1.223207328591921e-8,0.16535376220167072,0.9862343196856177],[1,0.0000022966890603318473,-0.0000018063238006734034,19.035571688540053]],[2,"Bip001 L Finger1",3,[-83],[0,"09y2ckIwRNErC4GCnbH6OF",1,0],[1,0.0642060860991478,-0.0030364035628736,-0.0255723427981138],[3,0.01900288787801313,0.038656017710834344,0.449002224936031,0.8924917952281293],[1,-0.07626653362361262,4.998509653675864,53.41088736157852]],[3,"Bip001 L Finger11",27,[[10,"Bip001 L Finger1Nub",-84,[0,"ecG7wH7+lLsoJbo3RqBqpP",1,0],[1,0.0314494706690311,0,-4.76837147544984e-9]]],[0,"798wkOP4RHnpuAFFEXqIn5",1,0],[1,0.0254925712943077,0,4.76837147544984e-9],[3,-5.373080809965948e-9,-1.4979975048232016e-8,0.7628020279392997,0.6466320949130901],[1,179.99999443443153,-179.9999960892009,80.57630983297425]],[2,"Bip001 L Finger2",3,[-85],[0,"fbajOpNGJIer84/V5jdrjz",1,0],[1,0.0636313259601593,0,4.76837147544984e-9],[3,0.009972718735643489,0.02070780324433298,0.44930777815750533,0.8930813245460795],[1,-0.07646433064574888,2.6950172324838233,53.41271775562261]],[3,"Bip001 L Finger21",29,[[5,"Bip001 L Finger2Nub",-86,[0,"38TqCoZL5PtoB0peEvVVR5",1,0],[1,0.0346804410219193,0,-4.76837147544984e-9],[1,-0.0000017075472972740244,-0.000001280660475738495,-4.268868040424682e-7]]],[0,"e0pNuUP/lOEoU5/bf3mn7I",1,0],[1,0.0219841189682484,0,9.53674295089968e-9],[3,8.76958850721925e-10,1.8605796266218858e-8,0.7708640202663118,0.6369997348970081],[1,-179.99999161892157,179.9999932046995,79.13691872221462]],[2,"Bip001 L Finger3",3,[-87],[0,"cfor4BKVNI1YidBffT+lQV",1,0],[1,0.0625807493925095,0.0000222206108446699,0.0278820171952248],[3,-0.02314781581134209,-0.03434015061409169,0.5504953854788363,0.8338103880652202],[1,-0.11574561206959484,-4.640322528939242,66.86874520648081]],[3,"Bip001 L Finger31",31,[[5,"Bip001 L Finger3Nub",-88,[0,"2efls7441E1YiHWcHh9Mp7",1,0],[1,0.0271366871893406,-1.77635679969558e-17,-4.76837147544984e-9],[1,-2.2065100638229906e-14,-0.000001013856306701518,-6.403302855775701e-7]]],[0,"5dNiv+pnRJwJCbd3uZw/wz",1,0],[1,0.017944660037756,-3.81469718035987e-8,-2.38418573772492e-9],[3,3.865178782720863e-9,1.9734940481545905e-8,0.5981033946162396,0.8014189474603968],[1,-0.0000035060348849874294,0.000005438390216795102,73.4683674226553]],[2,"Bip001 R Clavicle",6,[-89],[0,"0fjmZwoPNPLYaot8NUmlOw",1,0],[1,-0.00197071069851518,-0.05446557700634,-0.0767092779278755],[3,0.7558438962772164,-0.03458904187035337,-0.6535271565999794,0.020145923391933305],[1,-179.15192134513472,81.72890436865633,-4.509227494954315]],[2,"Bip001 R UpperArm",33,[-90],[0,"95O2xqEx9N0qNmWKrV/+Tv",1,0],[1,0.077858954668045,0,0],[3,0.0022789926857553397,-0.6105662617453868,0.12946100603295982,0.7813088340262998],[1,9.495313986747476,-76.97185288944057,11.508605031058897]],[2,"Bip001 R Forearm",34,[4],[0,"9088H/e3FPLKOnq22UW1A3",1,0],[1,0.109422817826271,-1.90734859017994e-8,1.90734859017994e-8],[3,3.493590977750972e-17,-5.597919068259573e-18,-0.3487892396194157,0.9372011877530406],[1,4.6626819746869704e-15,1.0508085564479365e-15,-40.826554950379155]],[2,"Bip001 R Finger0",4,[-91],[0,"e2X6ZzyjpDc6m0F/Awkn6X",1,0],[1,0.0253323540091515,0.0232556145638227,0.0373742207884789],[3,-0.7158819934773418,-0.18838554362064677,0.1495280245275946,0.6554885416622744],[1,-94.51699310207673,-2.129395886113848,27.75886547965057]],[3,"Bip001 R Finger01",36,[[1,"Bip001 R Finger0Nub",-92,[0,"9bMshfbpJP9KVFy73jQ4NR",1,0],[1,0.0240806248039007,9.53674295089968e-9,0],[3,7.45058148510225e-9,-1.31839010644017e-16,1,1.49011629702045e-8],[1,-0.99999988079071,-0.999999940395355,-1],[1,179.99999999999997,-179.99999914622626,0.000001707547496058688]]],[0,"5dQzNgSEdFGo9OujRwgRSQ",1,0],[1,0.0218536853790283,-1.77635679969558e-17,1.90734859017994e-8],[3,-1.2609364224412607e-8,-7.940312410721989e-9,0.5328653456886542,0.8462000492579227],[1,-0.0000017075474918147802,1.255096132112707e-13,64.39851981263998]],[2,"Bip001 R Finger1",4,[-93],[0,"57bqGgFCNFS4M+rqTVXawh",1,0],[1,0.0642060786485672,-0.0030364035628736,0.0255723465234041],[3,-0.015082026663295903,-0.04034760176759025,0.3584261496551657,0.9325638309234946],[1,0.061212105277186596,-4.978267100656443,42.04604228964461]],[3,"Bip001 R Finger11",38,[[1,"Bip001 R Finger1Nub",-94,[0,"77W7OZWBFL2KYBYOf7Z05n",1,0],[1,0.0314494594931602,1.77635679969558e-17,9.53674295089968e-9],[3,4.85722440924608e-17,3.7252898543727e-9,1,1.49011594174908e-8],[1,-1.00000011920929,-1.00000011920929,-1.00000011920929],[1,-179.99999957311323,180,0.0000017075470889476864]]],[0,"6ce5cxldNCKYMVsSClkPQG",1,0],[1,0.025492561981082,1.90734859017994e-8,-9.53674295089968e-9],[3,-1.383830617596004e-9,-3.928390091574819e-9,0.6950275957921827,0.7189830603618826],[1,0.000005870730245432013,-0.000006301233120573452,88.0588325567069]],[2,"Bip001 R Finger2",4,[-95],[0,"53lFEV4KFIMbdtIG0RmqVA",1,0],[1,0.0636313408613205,1.90734859017994e-8,1.77635679969558e-17],[3,-0.007873337603861032,-0.021593494033596453,0.3586717792986098,0.9331807361412718],[1,0.06137542375606393,-2.6747269579836708,42.047866424391245]],[3,"Bip001 R Finger21",40,[[1,"Bip001 R Finger2Nub",-96,[0,"b9KBoKJ81Ilo2KHO5qULSm",1,0],[1,0.0346804596483707,0,9.53674295089968e-9],[3,8.4976945798424e-34,-1.38777878078145e-17,1,-6.12323426292584e-17],[1,-0.99999988079071,-1,-0.99999988079071],[1,180,180,-7.016709604711002e-15]]],[0,"cd44tmv2tPLaklTlGjKQNl",1,0],[1,0.0219841096550226,-1.90734859017994e-8,-1.77635679969558e-17],[3,-2.306849151508219e-11,-5.268304892856601e-9,0.7040038094685018,0.7101961956064237],[1,0.00004831778741693903,-0.000048746543408544444,89.4982388317969]],[2,"Bip001 R Finger3",4,[-97],[0,"86Z3qbQdBJPYQ4m2CS8UDo",1,0],[1,0.0625807493925095,0.0000222015369217843,-0.0278820134699345],[3,0.01963387467976814,0.03646336939465375,0.46523089123426375,0.8842200809181054],[1,0.08028198178905611,4.680596127126875,55.503908727990634]],[3,"Bip001 R Finger31",42,[[1,"Bip001 R Finger3Nub",-98,[0,"76ezte6mhMSZMoBdiqqrnH",1,0],[1,0.0271366685628891,2.66453519954337e-17,0],[3,1.86264537127556e-9,7.45058148510225e-9,1,-7.51101304370728e-17],[1,-0.999999940395355,-0.99999988079071,-0.999999940395355],[1,-179.99999914622626,-179.99999978655657,-7.01670922555931e-15]]],[0,"0fQXg84eVOqrur0l3NtJg4",1,0],[1,0.0179446414113045,-9.53674295089968e-9,0],[3,1.9215500898838415e-9,-3.191462748831016e-9,0.51581217460481,0.8567016986848205],[1,8.063685456428139e-7,-9.123939011949835e-7,62.103514661696316]],[3,"Bip001 Head",6,[[10,"Bip001 HeadNub",-99,[0,"f4pmf/n31MmbOWpWEVsriP",1,0],[1,0.0794062986969948,-8.88178399847791e-18,-4.44089199923895e-18]]],[0,"67axcfRhdPfoerspopFYS7",1,0],[1,0.014146575704217,-1.77635679969558e-17,2.22044599961948e-18],[3,0.07583564694896389,-0.09170405778327799,-0.15455741046920285,0.980791174158377],[1,7.294099043935749,-9.494641420467307,-18.48678739641951]],[11,"Bone024",2,[[5,"Bone025",-100,[0,"5bpv7XtEZCwqot2mVooPLl",1,0],[1,0.116316251456738,-3.81469718035987e-8,1.90734859017994e-8],[1,-0.0000017075473115865167,0.000002561320544366,8.537735571960686e-7]]],[0,"60uo9n4itGg6H/QOUhLt+8",1,0],[1,-0.417663246393204,0.787864983081818,0.0776906311511993],[3,-0.365802025404123,-0.2715049129339871,0.8549742828845556,-0.24797769268421982],[1,2.54000067710876,2.53999996185303,2.53999996185303],[1,138.49122329880586,128.717959813768,-13.026107006276375]],[11,"Bone026",2,[[5,"Bone027",-101,[0,"61lIR+aaZMTY5gCF/kYqo4",1,0],[1,0.13690584897995,0,4.76837147544984e-9],[1,0.0000025613209387547833,2.385416011097537e-15,0.000001707547292503193]]],[0,"cc5z39fghJQLPnwJPRnVtg",1,0],[1,0.2939712703228,0.802543222904205,0.247903689742088],[3,0.16074362201136894,-0.09624513866337496,-0.24720659550513074,0.9506772640623611],[1,2.53999972343445,2.53999996185303,2.53999996185303],[1,17.347026828921774,-6.869866152076153,-30.064126882819476]],[11,"Bone031",2,[[10,"Bone032",-102,[0,"d47Y59Eo9ETY77haGMUzEA",1,0],[1,0.0800438895821571,-1.52587887214395e-7,-1.19209286886246e-9]]],[0,"c0zISAAQlESYhfKovSurY0",1,0],[1,0.0443644337356091,0.734939634799957,-0.151491075754166],[3,0.19013311303413946,-0.775931431594513,-0.15126532582358315,0.5821499926952864],[1,2.53999948501587,2.53999996185303,2.53999996185303],[1,-0.8685962690018766,-106.45863145358092,-28.110837934348645]]],0,[0,8,1,0,9,7,0,1,1,0,1,1,0,-1,2,0,-2,7,0,-1,8,0,-2,9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-15,45,0,-16,46,0,-17,10,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-36,47,0,0,2,0,0,2,0,-1,25,0,-2,27,0,-3,29,0,-4,31,0,-1,36,0,-2,38,0,-3,40,0,-4,42,0,-1,14,0,-2,18,0,-3,6,0,-1,22,0,-2,33,0,-3,44,0,-1,11,0,-2,12,0,1,8,0,1,8,0,0,9,0,-2,13,0,1,10,0,1,10,0,1,11,0,1,11,0,1,12,0,1,12,0,-1,15,0,-1,16,0,-1,17,0,0,17,0,-1,19,0,-1,20,0,-1,21,0,0,21,0,-1,23,0,-1,24,0,-1,26,0,0,26,0,-1,28,0,0,28,0,-1,30,0,0,30,0,-1,32,0,0,32,0,-1,34,0,-1,35,0,-1,37,0,0,37,0,-1,39,0,0,39,0,-1,41,0,0,41,0,-1,43,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,10,1,3,0,24,4,0,35,5,0,13,102],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,7,3,4,-1,2,7,3,4,-1,2,3,4,-1,2,3,4,-1,11],[0,5,6,0,1,0,7,8,0,1,0,9,0,1,0,10,0,1,4,4]],[[[28,"builtin-unlit",[{"hash":1502294929,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[12,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{"alphaThreshold":0},"mainTexture",6,0]],11]]],0,0,[0,0],[5,6],[2,3]],[[[8,".bin",104486476,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":816,"count":408,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.031213166192173958,-0.00722750648856163,-0.031773071736097336],"maxPosition",8,[1,0.031213166192173958,0.007227515801787376,0.031773071736097336]]],-1],0,0,[],[],[]],[[[17,"Skin-0",2318803961,["RootNode/Bone019(mirrored)","RootNode/Bone010(mirrored)","RootNode/Bone018(mirrored)","RootNode/Bone017(mirrored)","RootNode/Bone014(mirrored)","RootNode/Bone015(mirrored)","RootNode/Bone011(mirrored)","RootNode/Bone012(mirrored)","RootNode/Bone009(mirrored)","RootNode/Bone020(mirrored)","RootNode/Bone019","RootNode/Bone010","RootNode/Bone018","RootNode/Bone017","RootNode/Bone014","RootNode/Bone015","RootNode/Bone011","RootNode/Bone012","RootNode/Bone009","RootNode/Bone020","RootNode/Bone021","RootNode/Bone007","RootNode/Bone026","RootNode/Bone008(mirrored)","RootNode/Bone024","RootNode/Bone008","RootNode/Bone006","RootNode/Bone003","RootNode/Bone003(mirrored)","RootNode/Bone024/Bone025","RootNode/Bone026/Bone027","RootNode/Bone001"],[[[7,-0.395110160112381,0.3478977084159851,0.8502088785171509,0,-0.6626148819923401,0.5330969095230103,-0.5260695815086365,0,-0.6362622380256653,-0.7712163925170898,0.01989022083580494,0,0.12369401752948761,0.02083832398056984,-0.189554363489151,1],[7,0.3771417438983917,-0.8145945072174072,0.4406813979148865,0,-0.3000294268131256,0.34270012378692627,0.890246570110321,0,-0.8762115240097046,-0.46796661615371704,-0.11515574157238007,0,0.026537928730249405,0.24444954097270966,-0.08969147503376007,1],[7,-0.35163965821266174,-0.8090997338294983,0.47085776925086975,0,-0.014799516648054123,0.5077221989631653,0.8613936901092529,0,-0.9360183477401733,0.29593172669410706,-0.1905095875263214,0,0.13813896477222443,0.21330884099006653,-0.06692685186862946,1],[7,0.33787277340888977,-0.8149441480636597,0.4708586633205414,0,-0.37555789947509766,0.34199121594429016,0.8613930344581604,0,-0.8630168437957764,-0.4678760766983032,-0.1905091404914856,0,-0.032027438282966614,0.2475368082523346,-0.06692709028720856,1],[7,0.356566846370697,-0.8149420619010925,0.4568694531917572,0,-0.3405652642250061,0.34198856353759766,0.875819206237793,0,-0.8699861764907837,-0.46788182854652405,-0.15559911727905273,0,-0.03295106440782547,0.24452055990695953,-0.09110435098409653,1],[7,-0.35608160495758057,-0.8103499412536621,0.4653373956680298,0,0.02758575789630413,0.4886447489261627,0.8720465898513794,0,-0.9340476989746094,0.32335641980171204,-0.15164323151111603,0,0.1423538774251938,0.20513908565044403,-0.09360089153051376,1],[7,0.21139830350875854,-0.888485312461853,0.40731391310691833,0,-0.1395818144083023,0.38501739501953125,0.9122928977012634,0,-0.9673817753791809,-0.2497108429670334,-0.04262436181306839,0,0.012494663707911968,0.24842838943004608,-0.11399368196725845,1],[7,-0.1060771718621254,-0.9071070551872253,0.40731313824653625,0,0.0009035097318701446,0.409536212682724,0.9122931957244873,0,-0.9943576455116272,0.09714148193597794,-0.04262286052107811,0,0.08006579428911209,0.23523570597171783,-0.1139935851097107,1],[7,0.24961337447166443,0.3557002544403076,0.9006500244140625,0,-0.4304064214229584,0.8739213347434998,-0.22585779428482056,0,-0.8674349784851074,-0.33126842975616455,0.3712380826473236,0,0.16196611523628235,-0.042679838836193085,-0.2522818446159363,1],[7,-0.23314811289310455,0.4720027446746826,0.8502088785171509,0,-0.4101395010948181,0.7450074553489685,-0.5260694622993469,0,-0.8817183375358582,-0.4713563024997711,0.01988988183438778,0,0.1021144688129425,-0.01945059560239315,-0.18955430388450623,1],[7,0.3951120972633362,-0.347898930311203,0.8502074480056763,0,-0.6626129746437073,0.5330972075462341,0.5260718464851379,0,-0.6362630128860474,-0.7712158560752869,-0.019889188930392265,0,0.12368742376565933,0.02084427699446678,0.189539834856987,1],[7,-0.3771420121192932,0.8145933151245117,0.44068315625190735,0,-0.30002784729003906,0.3427027463912964,-0.8902460932731628,0,-0.8762118220329285,-0.4679664373397827,0.11515308171510696,0,0.026544110849499702,0.244435653090477,0.08968418091535568,1],[7,0.35164129734039307,0.8090983629226685,0.470858633518219,0,-0.014793287962675095,0.5077216029167175,-0.8613941073417664,0,-0.9360172748565674,0.29593634605407715,0.1905052363872528,0,0.13813358545303345,0.21329472959041595,0.06691864132881165,1],[7,-0.3378722667694092,0.8149445056915283,0.47085845470428467,0,-0.3755539655685425,0.341993123292923,-0.8613941669464111,0,-0.8630188703536987,-0.4678739011287689,0.19050566852092743,0,-0.03202148899435997,0.24752309918403625,0.06691864132881165,1],[7,-0.3564837574958801,0.8149464130401611,0.4569263458251953,0,-0.3406943380832672,0.34199610352516174,-0.8757659792900085,0,-0.8699690699577332,-0.4678686559200287,0.15573160350322723,0,-0.032927416265010834,0.24450720846652985,0.09110167622566223,1],[7,0.35748958587646484,0.8124638795852661,0.4605467617511749,0,0.012680502608418465,0.48886606097221375,-0.8722668290138245,0,-0.9338307976722717,0.3176661431789398,0.16446219384670258,0,0.1423671543598175,0.2059796154499054,0.09166738390922546,1],[7,-0.21139882504940033,0.8884842395782471,0.40731579065322876,0,-0.13958047330379486,0.38501960039138794,-0.9122922420501709,0,-0.9673819541931152,-0.2497108280658722,0.042622365057468414,0,0.012497995048761368,0.2484133541584015,0.11398676782846451,1],[7,0.10936041921377182,0.9051833748817444,0.41071078181266785,0,-0.014303701929748058,0.414579302072525,-0.9099007844924927,0,-0.9938990473747253,0.09363246709108353,0.05828605219721794,0,0.08103641122579575,0.23484842479228973,0.11406643688678741,1],[7,-0.24961332976818085,-0.3557020127773285,0.9006493091583252,0,-0.4304063618183136,0.8739208579063416,0.22585953772068024,0,-0.8674349784851074,-0.33126765489578247,-0.37123873829841614,0,0.1619700789451599,-0.042673882097005844,0.2522667944431305,1],[7,0.2331492155790329,-0.4720046818256378,0.8502070903778076,0,-0.41013801097869873,0.7450066208839417,0.5260716080665588,0,-0.881718635559082,-0.4713556170463562,-0.019889364019036293,0,0.10211055725812912,-0.019442595541477203,0.18953977525234222,1],[7,1.301600605074782e-7,-0.0000025459676180616952,1,0,-0.16460254788398743,-0.9863600134849548,-0.0000024898158699215855,0,0.9863600134849548,-0.16460254788398743,-5.474574322761327e-7,0,-0.3183588981628418,0.041955359280109406,-0.000008308987162308767,1],[7,5.01191379953525e-7,-0.0000013876435787096852,1,0,-0.448856920003891,-0.9600972533226013,-0.0000012449410178305698,0,1.54093337059021,-0.2796657681465149,-6.878893827888533e-7,0,-0.3369816243648529,0.09189058840274811,-0.000008244855052907951,1],[7,0.5392891764640808,0.8421206474304199,2.858783254566788e-8,0,8.94069742685133e-8,-2.330827442165173e-8,-1,0,-0.8421206474304199,0.5392891764640808,-8.786135907712378e-8,0,0.24499516189098358,-0.3348294794559479,0.04973084479570389,1],[7,0.3964028060436249,0.17803138494491577,0.9006495475769043,0,0.07701795548200607,0.9711111187934875,-0.22585736215114594,0,-0.9148405194282532,0.15889668464660645,0.3712395131587982,0,0.22678515315055847,-0.11950121819972992,-0.25228220224380493,1],[7,-0.6054549217224121,0.7958794832229614,-4.167498843798967e-7,0,2.887034042942105e-7,-3.040070453153021e-7,-1,0,-0.7958794832229614,-0.6054549217224121,-4.5710578433499904e-8,0,0.2030864655971527,0.340146005153656,0.049730777740478516,1],[7,-0.3964027762413025,-0.17803336679935455,0.9006491899490356,0,0.07701792567968369,0.9711105227470398,0.22585952281951904,0,-0.9148404598236084,0.15889747440814972,-0.37123915553092957,0,0.22679182887077332,-0.11949833482503891,0.25226685404777527,1],[7,0.007812257390469313,-0.999969482421875,-0.000003770986950257793,0,-2.9801396905781985e-8,0.000003770869398067589,-1,0,0.999969482421875,0.007812257390469313,-3.4148456284910367e-10,0,-0.16201096773147583,-0.0019714529626071453,-9.68811963986127e-9,1],[7,-0.10965985059738159,0.17607511579990387,-0.9782495498657227,0,-0.44595465064048767,-0.8882838487625122,-0.10989156365394592,0,-0.8883125185966492,0.4242042899131775,0.17593060433864594,0,0.15260829031467438,-0.031018046662211418,-0.07854520529508591,1],[7,0.10966012626886368,-0.17607228457927704,-0.9782498478889465,0,-0.4459554851055145,-0.8882836103439331,0.1098887249827385,0,-0.888312041759491,0.4242054522037506,-0.1759297102689743,0,0.15260645747184753,-0.0310153067111969,0.07856165617704391,1],[7,-0.6054548621177673,0.7958794236183167,-4.167498843798967e-7,0,2.8870337587250106e-7,-3.0400698847188323e-7,-1,0,-0.7958794236183167,-0.6054548621177673,-4.5710578433499904e-8,0,0.086770199239254,0.340146005153656,0.04973074793815613,1],[7,0.5392891764640808,0.8421206474304199,2.858783254566788e-8,0,8.94069742685133e-8,-2.330827442165173e-8,-1,0,-0.8421206474304199,0.5392891764640808,-8.786135907712378e-8,0,0.10808932036161423,-0.3348294794559479,0.049730848520994186,1],[7,1.6292067073209182e-7,-1,-0.000004963078936270904,0,6.123234262925839e-17,0.000004963078936270904,-1,0,1,1.6292067073209182e-7,8.08649371422665e-13,0,-0.050218433141708374,0.4211578965187073,0.000002088044766423991,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",2351295176,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":48,"count":24,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":8,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.006128519773483276,-0.015593661926686764,-0.005347652360796928],"maxPosition",8,[1,0.006128521636128426,0.0026492595206946135,0.006909465417265892]]],-1],0,0,[],[],[]],[[[8,".bin",257421715,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":32112,"length":3144,"count":1572,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":32112,"count":446,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.12408022582530975,-0.0555732324719429,0.0006673693424090743],"maxPosition",8,[1,0.12416654080152512,0.0657917931675911,0.16234257817268372]]],-1],0,0,[],[],[]],[[[8,".bin",2753320310,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":115848,"length":13176,"count":6588,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":115848,"count":1609,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,31]]},"minPosition",8,[1,-0.2833235263824463,-0.06604238599538803,0.0004999521188437939],"maxPosition",8,[1,0.4754328429698944,0.1658521443605423,0.4575672447681427]]],-1],0,0,[],[],[]],[[[17,"Skin-1",1695489026,["RootNode/Bone003(mirrored)","RootNode/Bone004(mirrored)","RootNode/Bone028","RootNode/Bone003","RootNode/Bone004","RootNode/Bone030"],[[[7,0.10965999215841293,-0.176072359085083,-0.9782497882843018,0,-0.4459553062915802,-0.8882837295532227,0.10988888144493103,0,-0.8883123397827148,0.4242052733898163,-0.17592957615852356,0,0.15260648727416992,-0.031015267595648766,0.07856161892414093,1],[7,0.2816961109638214,-0.09968533366918564,-0.9784152507781982,0,0.0697404071688652,-0.9929801821708679,0.1094602644443512,0,-1.5289127826690674,-0.06366080045700073,-0.17527617514133453,0,0.14761219918727875,0.017489731311798096,0.07850314676761627,1],[7,-0.000007674099833820947,9.536693710288091e-7,-1.0000001192092896,0,-1.0000001192092896,-6.854609750917007e-7,0.000007674098924326245,0,-6.854535286038299e-7,1.000000238418579,9.536745437799254e-7,0,0.007799938786774874,-0.03612840175628662,0.07468713074922562,1],[7,-0.1096598207950592,0.17607495188713074,-0.978249728679657,0,-0.44595474004745483,-0.8882839679718018,-0.10989139974117279,0,-0.8883125185966492,0.42420440912246704,0.17593052983283997,0,0.15260829031467438,-0.031018072739243507,-0.07854519784450531,1],[7,-0.28630301356315613,0.09539102017879486,-0.9781601428985596,0,0.1054154559969902,-0.9916535019874573,-0.10954400151968002,0,-1.5200248956680298,-0.08673959225416183,0.17664353549480438,0,0.1462123841047287,0.019712349399924278,-0.07861830294132233,1],[7,-0.000007659200491616502,9.536698826195789e-7,-1.0000001192092896,0,-1.000000238418579,-6.184057497193862e-7,0.000007659198672627099,0,-6.18398473761772e-7,1.0000001192092896,9.536745437799254e-7,0,0.007798588834702969,-0.03612826019525528,-0.07467040419578552,1]],8,8,8,8,8,8]]],0,0,[],[],[]]]]
